@page "/patches"
@inject IVersionService VersionService
@inject IPatchService PatchService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Patches</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Patch Management</MudText>

    <MudGrid>
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">Generate Patch</MudText>
                    <MudSelect T="AppVersion" @bind-Value="sourceVersion" Label="Source Version" Variant="Variant.Outlined">
                        @if (versions != null)
                        {
                            @foreach (var version in versions)
                            {
                                <MudSelectItem Value="@version">@version.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudSelect T="AppVersion" @bind-Value="targetVersion" Label="Target Version" Variant="Variant.Outlined" Class="mt-3">
                        @if (versions != null)
                        {
                            @foreach (var version in versions.Where(v => v.Id != sourceVersion?.Id))
                            {
                                <MudSelectItem Value="@version">@version.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(sourceVersion == null || targetVersion == null || isGenerating)" OnClick="GeneratePatch">
                        @if (isGenerating)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Generating...</MudText>
                        }
                        else
                        {
                            <MudText>Generate Patch</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="6">
            @if (selectedPatch != null)
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Patch Details</MudText>
                        <MudSimpleTable Dense="true" Class="mt-3">
                            <tbody>
                                <tr>
                                    <td><strong>Source:</strong></td>
                                    <td>@selectedPatch.SourceVersion?.Name</td>
                                </tr>
                                <tr>
                                    <td><strong>Target:</strong></td>
                                    <td>@selectedPatch.TargetVersion?.Name</td>
                                </tr>
                                <tr>
                                    <td><strong>Size:</strong></td>
                                    <td>@FormatFileSize(selectedPatch.PatchSize)</td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td>
                                        <MudChip Color="@GetStatusColor(selectedPatch.Status)" Size="Size.Small">
                                            @selectedPatch.Status
                                        </MudChip>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Created:</strong></td>
                                    <td>@selectedPatch.CreatedAt.ToLocalTime().ToString("g")</td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                    <MudCardActions>
                        @if (selectedPatch.Status == PatchStatus.Completed)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => DownloadPatch(selectedPatch))">
                                Download Patch
                            </MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            }
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">All Patches</MudText>
        @if (allPatches == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (!allPatches.Any())
        {
            <MudAlert Severity="Severity.Info">No patches generated yet.</MudAlert>
        }
        else
        {
            <MudTable Items="@allPatches" Hover="true" Striped="true" OnRowClick="@((TableRowClickEventArgs<Patch> args) => SelectPatch(args.Item))">
                <HeaderContent>
                    <MudTh>Source Version</MudTh>
                    <MudTh>Target Version</MudTh>
                    <MudTh>Size</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Created</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Source">@context.SourceVersion?.Name</MudTd>
                    <MudTd DataLabel="Target">@context.TargetVersion?.Name</MudTd>
                    <MudTd DataLabel="Size">@FormatFileSize(context.PatchSize)</MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                            @context.Status
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Created">@context.CreatedAt.ToLocalTime().ToString("g")</MudTd>
                    <MudTd DataLabel="Actions">
                        @if (context.Status == PatchStatus.Completed)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Primary" OnClick="@(() => DownloadPatch(context))" Title="Download" />
                        }
                        @if (context.Status == PatchStatus.Failed)
                        {
                            <MudTooltip Text="@context.ErrorMessage">
                                <MudIconButton Icon="@Icons.Material.Filled.Error" Color="Color.Error" Title="View Error" />
                            </MudTooltip>
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<AppVersion>? versions;
    private List<Patch>? allPatches;
    private AppVersion? sourceVersion;
    private AppVersion? targetVersion;
    private Patch? selectedPatch;
    private bool isGenerating = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        versions = await VersionService.GetAllVersionsAsync();
        await LoadPatches();
    }

    private async Task LoadPatches()
    {
        allPatches = new List<Patch>();
        if (versions != null)
        {
            foreach (var version in versions)
            {
                var patches = await PatchService.GetPatchesForVersionAsync(version.Id);
                allPatches.AddRange(patches);
            }
            allPatches = allPatches.DistinctBy(p => p.Id).OrderByDescending(p => p.CreatedAt).ToList();
        }
    }

    private async Task GeneratePatch()
    {
        if (sourceVersion == null || targetVersion == null)
            return;

        isGenerating = true;
        try
        {
            var patch = await PatchService.GeneratePatchAsync(sourceVersion.Id, targetVersion.Id);
            await LoadPatches();
            selectedPatch = patch;
            Snackbar.Add("Patch generated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating patch: {ex.Message}", Severity.Error);
        }
        finally
        {
            isGenerating = false;
        }
    }

    private void SelectPatch(Patch patch)
    {
        selectedPatch = patch;
    }

    private async Task DownloadPatch(Patch patch)
    {
        try
        {
            var fileBytes = await PatchService.GetPatchFileAsync(patch.Id);
            var fileName = $"{patch.SourceVersion?.Name}_to_{patch.TargetVersion?.Name}.patch";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
            Snackbar.Add($"Downloaded {fileName}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error downloading patch: {ex.Message}", Severity.Error);
        }
    }

    private Color GetStatusColor(PatchStatus status)
    {
        return status switch
        {
            PatchStatus.Pending => Color.Default,
            PatchStatus.Processing => Color.Info,
            PatchStatus.Completed => Color.Success,
            PatchStatus.Failed => Color.Error,
            _ => Color.Default
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size = size / 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}