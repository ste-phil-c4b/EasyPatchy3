// <auto-generated />
using System;
using EasyPatchy3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyPatchy3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyPatchy3.Data.Models.AppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Hash");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("EasyPatchy3.Data.Models.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("DownloadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("PatchId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DownloadedAt");

                    b.HasIndex("PatchId");

                    b.HasIndex("VersionId");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("EasyPatchy3.Data.Models.Patch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatchFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("PatchSize")
                        .HasColumnType("bigint");

                    b.Property<int>("SourceVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TargetVersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TargetVersionId");

                    b.HasIndex("SourceVersionId", "TargetVersionId")
                        .IsUnique();

                    b.ToTable("Patches");
                });

            modelBuilder.Entity("EasyPatchy3.Data.Models.Download", b =>
                {
                    b.HasOne("EasyPatchy3.Data.Models.Patch", "Patch")
                        .WithMany()
                        .HasForeignKey("PatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyPatchy3.Data.Models.AppVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Patch");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("EasyPatchy3.Data.Models.Patch", b =>
                {
                    b.HasOne("EasyPatchy3.Data.Models.AppVersion", "SourceVersion")
                        .WithMany("SourcePatches")
                        .HasForeignKey("SourceVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyPatchy3.Data.Models.AppVersion", "TargetVersion")
                        .WithMany("TargetPatches")
                        .HasForeignKey("TargetVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceVersion");

                    b.Navigation("TargetVersion");
                });

            modelBuilder.Entity("EasyPatchy3.Data.Models.AppVersion", b =>
                {
                    b.Navigation("SourcePatches");

                    b.Navigation("TargetPatches");
                });
#pragma warning restore 612, 618
        }
    }
}
